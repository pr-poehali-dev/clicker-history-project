
import { useState, useEffect } from 'react';
import { useToast } from '@/components/ui/use-toast';
import { 
  GameState, 
  SAVE_KEY, 
  SAVE_INTERVAL, 
  defaultState 
} from '@/types/game';

export const useGameState = () => {
  const [gameState, setGameState] = useState<GameState>(defaultState);
  const [activeTab, setActiveTab] = useState('upgrades');
  const [lastSave, setLastSave] = useState(Date.now());
  const [isNewAchievement, setIsNewAchievement] = useState(false);
  
  const { toast } = useToast();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
  useEffect(() => {
    const savedState = localStorage.getItem(SAVE_KEY);
    if (savedState) {
      try {
        const parsedState = JSON.parse(savedState) as GameState;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å
        const now = Date.now();
        const offlineTime = (now - parsedState.lastPlayed) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        if (offlineTime > 60 && parsedState.offlineProgress) {
          const offlineCoins = Math.floor(parsedState.coinsPerSecond * Math.min(offlineTime, 24 * 60 * 60)); // –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
          
          if (offlineCoins > 0) {
            parsedState.coins += offlineCoins;
            parsedState.totalCoins += offlineCoins;
            
            setTimeout(() => {
              toast({
                title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!",
                description: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${offlineCoins.toLocaleString()} –º–æ–Ω–µ—Ç –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.`,
                duration: 5000,
              });
            }, 1000);
          }
        }
        
        parsedState.lastPlayed = now;
        setGameState(parsedState);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
        setGameState(defaultState);
      }
    }
  }, [toast]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  useEffect(() => {
    const checkAchievements = () => {
      let newAchievement = false;
      
      const updatedAchievements = gameState.achievements.map(achievement => {
        if (!achievement.unlocked && achievement.condition(gameState)) {
          newAchievement = true;
          
          setTimeout(() => {
            toast({
              title: `üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!`,
              description: `${achievement.name}: +${achievement.reward} –º–æ–Ω–µ—Ç`,
              duration: 5000,
            });
          }, 300);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
          setGameState(prev => ({
            ...prev,
            coins: prev.coins + achievement.reward,
            totalCoins: prev.totalCoins + achievement.reward,
          }));
          
          return { ...achievement, unlocked: true };
        }
        return achievement;
      });
      
      if (newAchievement) {
        setIsNewAchievement(true);
        setTimeout(() => setIsNewAchievement(false), 2000);
        
        setGameState(prev => ({
          ...prev,
          achievements: updatedAchievements,
        }));
      }
    };
    
    checkAchievements();
  }, [gameState.coins, gameState.totalCoins, gameState.upgrades, toast]);

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–ø–≥—Ä–µ–π–¥–æ–≤
  useEffect(() => {
    if (gameState.totalCoins > 0) {
      const updatedUpgrades = gameState.upgrades.map(upgrade => {
        if (!upgrade.unlocked && gameState.totalCoins >= upgrade.unlockCoins) {
          return { ...upgrade, unlocked: true };
        }
        return upgrade;
      });
      
      if (JSON.stringify(updatedUpgrades) !== JSON.stringify(gameState.upgrades)) {
        setGameState(prev => ({
          ...prev,
          upgrades: updatedUpgrades,
        }));
      }
    }
  }, [gameState.totalCoins, gameState.upgrades]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
  useEffect(() => {
    if (gameState.coinsPerSecond > 0) {
      const interval = setInterval(() => {
        setGameState(prev => ({
          ...prev,
          coins: prev.coins + prev.coinsPerSecond,
          totalCoins: prev.totalCoins + prev.coinsPerSecond,
        }));
      }, 1000);
      
      return () => clearInterval(interval);
    }
  }, [gameState.coinsPerSecond]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  useEffect(() => {
    const now = Date.now();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ SAVE_INTERVAL –º—Å –∏–ª–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
    if (now - lastSave > SAVE_INTERVAL) {
      saveGame();
      setLastSave(now);
    }
    
    const handleBeforeUnload = () => {
      saveGame();
    };
    
    window.addEventListener('beforeunload', handleBeforeUnload);
    
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [gameState, lastSave]);

  // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
  useEffect(() => {
    const checkDailyReward = () => {
      const now = new Date();
      const lastReward = new Date(gameState.dailyRewardLast);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å (—Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã)
      if (
        now.getDate() !== lastReward.getDate() ||
        now.getMonth() !== lastReward.getMonth() ||
        now.getFullYear() !== lastReward.getFullYear()
      ) {
        setGameState(prev => ({ ...prev, dailyRewardClaimed: false }));
      }
    };
    
    checkDailyReward();
  }, [gameState.dailyRewardLast]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
  const saveGame = () => {
    const saveState = {
      ...gameState,
      lastPlayed: Date.now(),
    };
    
    localStorage.setItem(SAVE_KEY, JSON.stringify(saveState));
  };

  // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
  const handleClick = () => {
    const clickValue = gameState.coinsPerClick;
    
    setGameState(prev => ({
      ...prev,
      coins: prev.coins + clickValue,
      totalCoins: prev.totalCoins + clickValue,
    }));
  };

  // –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
  const buyUpgrade = (upgradeId: string) => {
    const upgradeIndex = gameState.upgrades.findIndex(u => u.id === upgradeId);
    
    if (upgradeIndex === -1 || gameState.coins < gameState.upgrades[upgradeIndex].cost) return;
    
    const updatedUpgrades = [...gameState.upgrades];
    const upgrade = { ...updatedUpgrades[upgradeIndex] };
    
    // –°–Ω–∏–º–∞–µ–º –º–æ–Ω–µ—Ç—ã
    setGameState(prev => ({
      ...prev,
      coins: prev.coins - upgrade.cost,
    }));
    
    // –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç)
    upgrade.level += 1;
    upgrade.cost = Math.floor(upgrade.baseCost * Math.pow(1.15, upgrade.level));
    updatedUpgrades[upgradeIndex] = upgrade;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    let newCoinsPerClick = gameState.coinsPerClick;
    let newCoinsPerSecond = gameState.coinsPerSecond;
    
    switch (upgradeId) {
      case 'clickPower':
        newCoinsPerClick += 1 * gameState.prestigeMultiplier;
        break;
      case 'autoClicker':
        newCoinsPerSecond += 1 * gameState.prestigeMultiplier;
        break;
      case 'clickMultiplier':
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 20% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        newCoinsPerClick = Math.floor(newCoinsPerClick * (1 + upgrade.effect));
        break;
      case 'asteroidMiner':
        newCoinsPerSecond += 5 * gameState.prestigeMultiplier;
        break;
      case 'spaceStation':
        newCoinsPerSecond += 25 * gameState.prestigeMultiplier;
        break;
      case 'planetaryBase':
        newCoinsPerSecond += 100 * gameState.prestigeMultiplier;
        break;
    }
    
    setGameState(prev => ({
      ...prev,
      upgrades: updatedUpgrades,
      coinsPerClick: newCoinsPerClick,
      coinsPerSecond: newCoinsPerSecond,
    }));
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
  const claimDailyReward = () => {
    const baseReward = 100 * Math.pow(2, gameState.prestigeLevel);
    
    setGameState(prev => ({
      ...prev,
      coins: prev.coins + baseReward,
      totalCoins: prev.totalCoins + baseReward,
      dailyRewardClaimed: true,
      dailyRewardLast: Date.now(),
    }));
    
    toast({
      title: "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞!",
      description: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${baseReward} –º–æ–Ω–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!`,
      duration: 5000,
    });
  };

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã –¥–ª—è –ø—Ä–µ—Å—Ç–∏–∂–∞ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)
  const prestige = () => {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    toast({
      title: "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
      description: "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ—Å—Ç–∏–∂–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.",
      duration: 3000,
    });
  };

  // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const resetGame = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!')) {
      localStorage.removeItem(SAVE_KEY);
      setGameState(defaultState);
      toast({
        title: "–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞",
        description: "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã",
        duration: 3000,
      });
    }
  };

  return {
    gameState,
    activeTab,
    isNewAchievement,
    setActiveTab,
    handleClick,
    buyUpgrade,
    claimDailyReward,
    prestige,
    resetGame
  };
};
